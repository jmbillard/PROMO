/*

---------------------------------------------------------------
> üå≥ tree view functions
---------------------------------------------------------------

*/

// Fun√ß√£o para remover pastas vazias da √°rvore de diret√≥rios (recursivamente)
function cleanHierarchy(nodeTree) {
	// Obt√©m todos os subitens (arquivos ou pastas) do n√≥ atual
	var branches = nodeTree.items;

	// Percorre os subitens em ordem reversa para remover com seguran√ßa enquanto iteramos
	for (var i = branches.length - 1; i >= 0; i--) {
		// Se o subitem n√£o for uma pasta ("node"), ignora e passa para o pr√≥ximo
		if (branches[i].type !== 'node') continue;

		// Chama a fun√ß√£o recursivamente para limpar as subpastas
		var wasEmpty = cleanHierarchy(branches[i]);

		// Se o subitem era uma pasta e agora est√° vazio (ou j√° estava), remove-o
		if (wasEmpty) {
			nodeTree.remove(branches[i]);
		}
	}

	// Retorna se o n√≥ atual ficou vazio ap√≥s a limpeza (exceto se for a raiz)
	return nodeTree.items.length === 0 && nodeTree.parent !== null;
}

// Otimiza a hierarquia da √°rvore, combinando pastas com apenas uma subpasta
function optimizeHierarchy(nodeTree) {
	var branches = nodeTree.items;

	for (var i = branches.length - 1; i >= 0; i--) {
		// Pula itens que n√£o s√£o pastas
		if (branches[i].type !== 'node') continue;

		// Se a pasta tiver mais de um item, chama a fun√ß√£o recursivamente para otimizar as subpastas
		if (branches[i].items.length > 1) {
			optimizeHierarchy(branches[i]);
		} else {
			// Se a pasta tiver apenas uma subpasta, combina os nomes e move os itens
			if (branches[i].items.length === 1 && branches[i].items[0].type === 'node') {
				var subfolder = branches[i].items[0];
				branches[i].text += ' / ' + subfolder.text; // Combina os nomes

				while (subfolder.items.length > 0) {
					var item = subfolder.items[0];
					try {
						// Move o item para a pasta pai, preservando o tipo, texto e imagem
						var newItem = branches[i].add(item.type, item.text);
						newItem.image = item.image;
						subfolder.remove(0);
					} catch (error) { }
				}
				nodeTree.remove(subfolder); // Remove a subpasta agora vazia
			}
		}
	}
}

// Cria a hierarquia de arquivos e pastas na √°rvore da interface do usu√°rio
function createHierarchy(array, node, fileTypes) {
	for (var n = 0; n < array.length; n++) {
		var nodeName = array[n].displayName; // Nome do item atual

		// Verifica se o item atual √© uma pasta (Folder)
		if (array[n] instanceof Folder) {
			var subArray = array[n].getFiles(); // Obt√©m os arquivos e subpastas da pasta atual

			// Se a pasta possui conte√∫do (arquivos ou subpastas)
			if (subArray.length > 0) {
				var nodeItem = node.add('node', nodeName); // Adiciona um n√≥ de pasta na √°rvore
				// nodeItem.image = fldTogIcon.light;  // Opcional: define o √≠cone da pasta (descomente se necess√°rio)

				// Chama recursivamente a fun√ß√£o para processar o conte√∫do da pasta
				createHierarchy(subArray, nodeItem, fileTypes);
			}
		} else { // Se o item atual n√£o for uma pasta (√© um arquivo)
			try {
				// Filtra os arquivos com base nas extens√µes permitidas em fileTypes
				if (fileTypes.indexOf(getFileExt(nodeName)) >= 0) {
					var templateItem = node.add('item', nodeName); // Adiciona um n√≥ de arquivo na √°rvore
					templateItem.image = templateListIcon.light;  // Define o √≠cone do arquivo
				}
			} catch (error) { }
		}
	}
}

// refreshes the main 'tree view' node...
// Constr√≥i a √°rvore de arquivos e pastas na interface do usu√°rio
function buildTree(folder, tree, fileTypes) {
	// Remove todos os itens da √°rvore (limpa a √°rvore)
	tree.remove(tree.items[0]);

	// Obt√©m todos os arquivos e pastas dentro da pasta especificada
	var folderContentArray = folder.getFiles();

	// Adiciona a pasta raiz (folder) como um novo n√≥ na √°rvore
	var folderNode = tree.add('node', folder.displayName);

	// Chama a fun√ß√£o createHierarchy para popular a √°rvore recursivamente,
	// come√ßando pela pasta raiz e filtrando pelos tipos de arquivo permitidos
	createHierarchy(folderContentArray, folderNode, fileTypes);

	// Remove pastas vazias da √°rvore (limpa a hierarquia)
	cleanHierarchy(tree);

	// A linha abaixo √© opcional e pode ser utilizada para otimizar a hierarquia,
	// combinando pastas com apenas um √∫nico item
	optimizeHierarchy(tree);
}

//Constr√≥i a √°rvore de fontes a partir de uma pasta especificada.
function buildFontTree(folder, tree) {
	// Remove o primeiro item da √°rvore (geralmente o item "Root")
	tree.remove(tree.items[0]);

	// Obt√©m todos os arquivos e pastas dentro da pasta especificada
	var fontsArray = folder.getFiles();

	// Adiciona a pasta raiz (folder) como um novo n√≥ na √°rvore
	var folderNode = tree.add('node', folder.displayName);
	folderNode.image = fldTogIcon.light; // Define o √≠cone da pasta

	// Percorre a lista de arquivos e pastas
	for (var n = 0; n < fontsArray.length; n++) {
		var fName = fontsArray[n].displayName; // Nome do item atual
		var subArray = []; // Lista de subitens (arquivos ou pastas)

		// Se o item atual for um arquivo, pula para o pr√≥ximo
		if (fontsArray[n] instanceof File) continue;

		// Obt√©m a lista de subitens (arquivos ou pastas) do item atual
		subArray = fontsArray[n].getFiles();

		// Se o item atual n√£o possui subitens, pula para o pr√≥ximo
		if (subArray.length == 0) continue;

		// Adiciona o item atual como um novo n√≥ na √°rvore
		var fontFamilyItem = folderNode.add('item', fName);
		fontFamilyItem.image = fontFamilyIcon; // Define o √≠cone do item
	}

	// Remove pastas vazias da √°rvore (limpa a hierarquia)
	cleanHierarchy(tree);
}

// Constr√≥i a √°rvore de resultados da busca
function buildFindTree(tree, obj, compArray, progBar) {
	var sKey = obj.sKey;          // Palavra-chave de busca
	var vis = obj.vis;            // Incluir camadas ocultas? (true/false)
	var matchCase = obj.matchCase; // Diferenciar mai√∫sculas/min√∫sculas? (true/false)
	var matchAccent = obj.matchAccent; // Diferenciar acentos? (true/false)
	var invert = !obj.invert;      // Inverter a busca (n√£o incluir a palavra-chave)? (true/false)
	var regExp = obj.regExp;       // Usar express√µes regulares? (true/false)
	var resultArray = [];          // Array para armazenar as composi√ß√µes encontradas

	// Se n√£o houver palavra-chave, retorna um array vazio e contagem 0
	if (sKey == '') return resultArray;

	// Se a op√ß√£o de express√£o regular estiver marcada, converte a palavra-chave em uma express√£o regular
	if (regExp) {
		var pattern = 'new RegExp(/' + sKey + '/);'; // Cria a string da express√£o regular
		sKey = eval(pattern); // Avalia a string para criar o objeto RegExp
	}

	// Remove todos os itens da √°rvore para come√ßar do zero
	while (tree.items.length > 0) {
		tree.remove(tree.items[0]);
	}

	// Inicializa a barra de progresso e a contagem de itens da √°rvore
	progBar.value = 0;
	count = 0;
	var progInc = 100 / compArray.length; // Calcula o incremento da barra de progresso por composi√ß√£o

	// Itera sobre todas as composi√ß√µes no projeto
	for (i = 0; i < compArray.length; i++) {

		// Itera sobre todas as camadas em cada composi√ß√£o
		for (var l = 1; l <= compArray[i].numLayers; l++) {
			if (!(compArray[i].layer(l) instanceof TextLayer)) continue; // Pula se n√£o for camada de texto

			var compItem; // Vari√°vel para armazenar o item da composi√ß√£o na √°rvore
			var txtLayer = compArray[i].layer(l); // Camada de texto atual
			var doc = txtLayer.property('ADBE Text Properties').property('ADBE Text Document'); // Propriedade de texto da camada
			var txtArray = []; // Array para armazenar o conte√∫do do texto em cada keyframe

			// Se a propriedade de texto tiver keyframes
			if (doc.numKeys > 0) {
				for (var k = 1; k <= doc.numKeys; k++) {
					compArray[i].time = doc.keyTime(k); // Define o tempo da composi√ß√£o para o keyframe atual
					txtArray.push(textContent(txtLayer)); // Adiciona o conte√∫do do texto ao array
				}
			} else {
				// Se a propriedade de texto tiver uma express√£o
				if (doc.expression != '') compArray[i].time = txtLayer.outPoint - 1; // Define o tempo para antes do ponto de sa√≠da da camada
				txtArray.push(textContent(txtLayer)); // Adiciona o conte√∫do do texto ao array
			}

			// Se n√£o estiver usando express√µes regulares, ajusta o texto para compara√ß√£o
			if (!regExp) {
				for (var m = 0; m < txtArray.length; m++) {
					// Respeita a op√ß√£o ALL CAPS da camada
					if (doc.value.allCaps) txtArray[m] = txtArray[m].toUpperCase();
					if (!matchCase) txtArray[m] = txtArray[m].toLowerCase(); // Converte para min√∫sculas se a op√ß√£o estiver desmarcada
					if (!matchAccent) txtArray[m] = txtArray[m].replaceSpecialCharacters(); // Remove acentos se a op√ß√£o estiver desmarcada
				}
				sKey = matchCase ? sKey : sKey.toLowerCase(); // Ajusta a palavra-chave para min√∫sculas se a op√ß√£o estiver desmarcada
				sKey = matchAccent ? sKey : sKey.replaceSpecialCharacters(); // Remove acentos da palavra-chave se a op√ß√£o estiver desmarcada
			}

			// Ignora camadas ocultas se a op√ß√£o estiver desmarcada
			if (vis && txtLayer.enabled == false) continue;

			// Itera sobre o array de textos
			for (var f = 0; f < txtArray.length; f++) {
				var r = txtArray[f].match(sKey) == null ? false : true; // Verifica se h√° correspond√™ncia

				if (r != invert) continue; // Ignora a correspond√™ncia se a op√ß√£o de inverter estiver marcada

				// Adiciona a composi√ß√£o na √°rvore se ainda n√£o estiver presente
				if (resultArray.indexOf(compArray[i]) < 0) {
					var compName = limitNameSize(compArray[i].name, 45); // Limita o tamanho do nome da composi√ß√£o
					compItem = tree.add('node', compName); // Adiciona o item da composi√ß√£o na √°rvore
					compItem.image = compTogIcon.light;
					count += 1;
					resultArray.push(compArray[i]);
				}

				// Adiciona a camada de texto na √°rvore
				var layerName = limitNameSize(txtLayer.name, 35); // Limita o tamanho do nome da camada
				var txtItem = compItem.add('item', '(' + (f + 1) + ')   #' + txtLayer.index + ' ¬† ' + layerName);
				txtItem.image = txtLayer.enabled ? eyeOpenIcon : eyeClosedIcon; // Define o √≠cone da camada (olho aberto ou fechado)
				count += 1;
			}
		}
		progBar.value += progInc; // Incrementa a barra de progresso
	}
	progBar.value = 100; // Define a barra de progresso como 100%
	 // Retorna o array de composi√ß√µes encontradas e a contagem de itens na √°rvore
	return { 'resultArray': resultArray, 'count': count };
}

// Expande todos os n√≥s de uma '√°rvore de exibi√ß√£o' (tree view).
function expandNodes(nodeTree) {
	// Expande o n√≥ atual e chama recursivamente a fun√ß√£o para os seus subn√≥s.
	nodeTree.expanded = true;
	
	// Obt√©m os subn√≥s do n√≥ atual
	var branches = nodeTree.items;

	// Percorre cada subn√≥
	for (var i = 0; i < branches.length; i++) {
		// Se o subn√≥ for um n√≥ (node), chama a fun√ß√£o recursivamente para expandir seus subn√≥s
		if (branches[i].type == 'node') expandNodes(branches[i]);
	}
}


// Fun√ß√£o recursiva que percorre uma '√°rvore de exibi√ß√£o' (tree view)
// e adiciona os n√≥s que cont√™m uma determinada string na lista de resultados
function findItem(nodeTree, list, searchTxt) {
	
	// Obt√©m os subn√≥s do n√≥ atual
	var branches = nodeTree.items;

	// Percorre cada subn√≥
	for (var i = 0; i < branches.length; i++) {
		
		// Se o subn√≥ for um n√≥ (node), chama a fun√ß√£o recursivamente para o seu subn√≥
		if (branches[i].type == 'node') findItem(branches[i], list, searchTxt);

		// Verifica se o texto do subn√≥ cont√©m a string procurada
		if (branches[i].text.trim().toUpperCase().replaceSpecialCharacters().match(searchTxt)) {
			
			// Adiciona o subn√≥ na lista de resultados
			list.push(branches[i]);
		}
	}
	
	// Retorna a lista de resultados
	return list;
}
